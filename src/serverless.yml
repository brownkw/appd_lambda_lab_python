# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-python-requirements
  - serverless-s3-remover

custom:
  remover:
    buckets:
      - ${self:provider.environment.CANDIDATE_S3_BUCKET}
  pythonRequirements:
    dockerizePip: true

service: appd-lambda-python

provider:
  name: aws
  runtime: python3.8
  stage: dev
  environment:
    CANDIDATE_S3_BUCKET: "candidate-resume-${opt:stage, self:provider.stage}"
    AWS_REGION_STR: ${opt:region, self:provider.region}
    APPDYNAMICS_ACCOUNT_NAME: "aws-sandbox"
    APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY: "9ayhsaoe096t"
    APPDYNAMICS_APPLICATION_NAME: "WayneLambdaTest"
    APPDYNAMICS_CONTROLLER_HOST: "aws-sandbox.saas.appdynamics.com"
    APPDYNAMICS_SERVERLESS_API_ENDPOINT: "https://pdx-sls-agent-api.saas.appdynamics.com"
    APPDYNAMICS_CONTROLLER_PORT: 443    
    APPDYNAMICS_LOG_LEVEL: "DEBUG"
    AWS_LAMBDA_EXEC_WRAPPER: "/opt/appdynamics-extension-script"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject        
      Resource: 
        Fn::Join: ['', [Fn::GetAtt: [ UploadBucket, Arn ], '/*'] ]
    - Effect: Allow
      Action:
        - s3:ListBucket 
      Resource:
        Fn::GetAtt: [ UploadBucket, Arn ]

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:provider.environment.CANDIDATE_S3_BUCKET}
        AccessControl: Private
        LifecycleConfiguration:
          Rules:
          - Id: DeleteContentAfter1Day
            Prefix: ''
            Status: 'Enabled'
            ExpirationInDays: 1

functions:
  lambda-1:
    handler: handler.lambda_function
    layers:
      - arn:aws:lambda:${opt:region, self:provider.region}:716333212585:layer:appdynamics-lambda-extension:9
    memorySize: 256
    timeout: 30
    environment:
      APPDYNAMICS_TIER_NAME: ${self:service}-lambda-1
    events:
      - http:
          path: /{proxy+}
          method: any

  lambda-2:
    handler: handler2.lambda_function
    memorySize: 256
    timeout: 30
    layers:
      - arn:aws:lambda:${opt:region, self:provider.region}:716333212585:layer:appdynamics-lambda-extension:9
    environment:
      APPDYNAMICS_TIER_NAME: ${self:service}-lambda-2